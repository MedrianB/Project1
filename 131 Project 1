#include <iomanip>
#include <iostream>
#include <string>
#include <vector>
template <typename T> class Item {
public:
  T name;
  T expiration;
  T category;
  int quantity;
  Item(T n, T e, T c, int q) {
    name = n;
    expiration = e;
    category = c;
    quantity = q;
  }
};
template <typename T> class Inventory {
public:
  // Write Your code

  void addNewItem(const Item<T> addedItem) {
    for (const auto &itemCheck : items) {
      if (itemCheck.name == addedItem.name &&
          itemCheck.expiration == addedItem.expiration &&
          itemCheck.category == addedItem.category &&
          itemCheck.quantity == addedItem.quantity) {

        std::cout << "Item is already present in inventory" << '\n';
        return; //you do not need to add this item
      }
    }
    items.push_back(addedItem);
    return; //you do need to add this item
  }

  void increaseQuantity(T name, int quantity) {
    for (int i = 0; i <= items.size(); i++) {
      if (items[i].name == name) {
        items[i].quantity += quantity;
        std::cout << "Quantity of " << name << " has increased by " << quantity
                  << "." << '\n';
        break;
      } else if (i == items.size()) {
        std::cout << "Could not increase quantity of " << name << ". ";
        throw "Item Not Found.";
      }
    }
  }

  void updateItem(T name, T expiration, T category, int quantity) {
    for (int i = 0; i <= items.size(); i++) {

      if (items[i].name == name) {
        items[i].expiration = expiration;
        items[i].category = category;
        items[i].quantity += quantity;
        break;
      } else if (i == items.size()) {
        std::cout << "Could not update " << name << ". ";
        throw "Item Not Found.";
      }
    }
  }

  void removeItem(T name) {
    for (int i = 0; i <= items.size(); i++) {

      if (items[i].name == name) {
        items.erase(items.begin() + i);
        break;
      } else if (i == items.size()) {
        std::cout << "Could not remove " << name << ". ";
        throw "Item Not Found.";
      }
    }
  }

  void Total() {
    std::cout << "There are " << items.size() << " total items in the inventory"
              << '\n';
  }

  void searchItem(T name) {
    for (int i = 0; i <= items.size(); i++) {

      if (items[i].name == name) {
        std::cout << '\n' << "Query for " << name << ". " << '\n';
        std::cout << "Item = " << name << ". " << '\n';
        std::cout << "Expiration Date = " << items[i].expiration << ". "
                  << '\n';
        std::cout << "Category = " << items[i].category << ". " << '\n';
        std::cout << "Quantity = " << items[i].quantity << ". " << '\n' << '\n';
        break;
      } else if (i == items.size()) {
        std::cout << "Could not search " << name << ". ";
        throw "Item Not Found. ";
      }
    }
  }

  void displayItems() {
    std::cout << "-------Inventory-------" << std::endl;
    std::cout << std::left << std::setw(20) << "Name" << std::setw(15)
              << "Expiration" << std::setw(15) << "Quantity" << std::setw(10)
              << "Category" << std::endl;
    for (int i = 0; i < items.size(); i++) {
      std::cout << std::left << std::setw(20) << items[i].name << std::setw(15)
                << items[i].expiration << std::setw(15) << items[i].quantity
                << std::setw(15) << items[i].category << std::endl;
    }
  }

private:
  std::vector<Item<T>> items;
};
template <typename T> class Appointment {
public:
  T c_name;
  T ap_date;
  T ap_time;
  T CWID;
  Appointment(T n, T d, T t, T cw) {
    c_name = n;
    ap_date = d;
    ap_time = t;
    CWID = cw;
  }
};
template <typename T> class AppointmentSystem {
public:
  // Write Your code
  void display() {
    std::cout << "-------Appointments-------" << std::endl;
    std::cout << std::left << std::setw(20) << "Name" << std::setw(15) << "Date"
              << std::setw(15) << "Time" << std::setw(15) << "CWID"
              << std::endl;
    for (int i = 0; i < ap.size(); i++) {
      std::cout << std::left << std::setw(20) << ap[i].c_name << std::setw(15)
                << ap[i].ap_date << std::setw(15) << ap[i].ap_time
                << std::setw(15) << ap[i].CWID << std::endl;
    }
  }

  void schedule(const Appointment<T> apCWID) {
    for (const auto &checkCWID : ap) {
      if (checkCWID.CWID == apCWID.CWID) {
        std::cout << "You have already scheduled an appointment!!" << '\n';
        return;
      }
    }
    ap.push_back(apCWID);
    return;
  }

  void Total_appointments(T ap_date, T ap_time) {
    int total = 0;
    for (int i = 0; i <= ap.size(); i++) {
      if (ap[i].ap_date == ap_date && ap[i].ap_time == ap_time) {
        total++;
      }
    }
    std::cout << "There are " << total << " total appointments on " << ap_date
              << ", " << ap_time << "." << '\n';
  }

  void removeRecent() { 
    ap.pop_back(); 
  }

private:
  std::vector<Appointment<T>> ap;
};
int main() {
  // Remove comments and run following test cases
  Inventory<std::string> i1;
  Item<std::string> I1("Protien Bar", "05/09/2023", "Snacks", 4);
  i1.addNewItem(I1);
  Item<std::string> I2("Milk", "05/12/2023", "Regular", 2);
  i1.addNewItem(I2);
  Item<std::string> I3("Cerels", "09/12/2023", "Snacks", 5);
  i1.addNewItem(I3);
  i1.displayItems();
  i1.updateItem("Milk", "09/24/2023", "Regular", 3);
  i1.displayItems();
  i1.increaseQuantity("Cerels", 10);
  i1.displayItems();
  try {
    i1.updateItem("bar", "09/12/2023", "Snacks", 3);
  } catch (const char *msg) {
    std::cout << msg << std::endl;
  }
  i1.displayItems();
  i1.updateItem("Cerels", "09/27/2023", "Regular", 4);
  i1.displayItems();
  i1.Total();
  try {
    i1.removeItem("Bread");
  } catch (const char *msg) {
    std::cout << msg << std::endl;
  }
  try {
    i1.removeItem("Milk");
  } catch (const char *msg) {
    std::cout << msg << std::endl;
  }
  i1.displayItems();
  try {
    i1.searchItem("Cerels");
  } catch (const char *msg) {
    std::cout << msg << std::endl;
  }
  Appointment<std::string> a1("John Bob", "09/12/2023", "9:30AM", "889456723");
  Appointment<std::string> a2("Jim Lee", "09/12/2023", "10:30AM", "883476923");
  Appointment<std::string> a3("Chris Lynn", "09/12/2023", "12:00PM",
                              "879455714");
  Appointment<std::string> a4("Arnav Shah", "09/12/2023", "12:00PM",
                              "879459583");
  AppointmentSystem<std::string> s1;
  s1.schedule(a1);
  s1.schedule(a2);
  s1.schedule(a3);
  s1.schedule(a4);
  s1.display();
  s1.Total_appointments("09/12/2023", "12:00PM");
  Appointment<std::string> a5("Chris Lynn", "09/12/2023", "12:00PM",
                              "879455714");
  s1.schedule(a4);
  s1.removeRecent();
  s1.display();
}
